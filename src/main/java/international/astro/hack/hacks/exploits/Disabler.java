package international.astro.hack.hacks.exploits;

import international.astro.events.PacketSendEvent;
import international.astro.hack.Hack;
import international.astro.hack.option.options.OList;
import international.astro.mixins.accessor.ICPacketPlayer;
import international.astro.util.TimerUtil;
import io.netty.buffer.Unpooled;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.LinkedBlockingQueue;

@Hack.Construct(name = "Disabler", description = "disable anticheat's", category = Hack.Category.EXPLOIT)
public class Disabler extends Hack {

    OList mode = new OList("Mode", "Tubnet", "Tubnet", "Verus");


    public TimerUtil timer = new TimerUtil();
    private final LinkedBlockingQueue<Packet<INetHandlerPlayServer>> packets;

    public Disabler(){
        this.packets = new LinkedBlockingQueue<Packet<INetHandlerPlayServer>>();
        addOption(mode);
    }
    @Override
    public void onEnable() {
        timer.reset();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        if(nullCheck()){return;}
        if(mode.isMode("TubNet")) {
            blink();
        }
        super.onDisable();
    }

    @SubscribeEvent
    public void onTick(TickEvent e){
        if(mode.isMode("Tubnet")) {
            if (timer.passedMs(60)) {
                blink();
                timer.reset();
            }
        } else if (mode.isMode("Verus")) {
            if (timer.passedMs(490)) {
                if (!packets.isEmpty()) {
                    mc.player.connection.sendPacket(packets.poll());
                }
                timer.reset();
            }
        }
    }

    @SubscribeEvent
    public void onSend(PacketSendEvent e){
        if(nullCheck()){return;}
        if(mode.isMode("Tubnet")) {
            Packet packet = e.getPacket();
            if (!(packet instanceof CPacketPlayer) || mc.player.ticksExisted % 15 != 0) {return;}
            try {
                final ByteArrayOutputStream b = new ByteArrayOutputStream();
                final DataOutputStream out = new DataOutputStream(b);
                out.writeUTF(mc.player.getGameProfile().getName());
                final PacketBuffer buf = new PacketBuffer(Unpooled.buffer());
                buf.writeBytes(b.toByteArray());
                mc.player.connection.sendPacket(new CPacketCustomPayload("matrix:geyser", buf));
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            if (packet instanceof CPacketPlayer) {
                e.setCanceled(true);
            }
            if (packet instanceof CPacketPlayer.Position || packet instanceof CPacketPlayer.Rotation || packet instanceof CPacketPlayerTryUseItemOnBlock || packet instanceof CPacketAnimation || packet instanceof CPacketEntityAction || packet instanceof CPacketUseEntity) {
                e.setCanceled(true);
                this.packets.add((Packet<INetHandlerPlayServer>) packet);
            }
        } else if (mode.isMode("Verus")) {
            if (e.getPacket() instanceof CPacketConfirmTransaction) {
                CPacketConfirmTransaction cPacketConfirmTransaction = (CPacketConfirmTransaction)e.getPacket();
                packets.add(cPacketConfirmTransaction);
                e.setCanceled(true);
            }
            if (e.getPacket() instanceof CPacketPlayer) {
                CPacketPlayer cPacketPlayer = (CPacketPlayer) e.getPacket();
                if (mc.player.ticksExisted % 40 == 0) {
                    ((ICPacketPlayer)cPacketPlayer).setY(-0.911);
                    ((ICPacketPlayer)cPacketPlayer).setOnGround(false);
                    ((ICPacketPlayer)cPacketPlayer).setMoving(true);
                }
            }
            if (mc.player != null && mc.player.ticksExisted <= 7) {
                timer.reset();
                packets.clear();
            }
        }
    }

    private void blink() {
        try {
            while (!packets.isEmpty()) {
                mc.player.connection.sendPacket(packets.take());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
